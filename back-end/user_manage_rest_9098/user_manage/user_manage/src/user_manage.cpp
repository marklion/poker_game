// This file generated by ngrestcg
// For more information, please visit: https://github.com/loentar/ngrest

#include "user_manage.h"
#include "random_user.h"
#include "db_sqlite_user.h"
#include "Base64.h"
#include "picosha2.h"
#include <hiredis/hiredis.h>

register_resp user_manage::proc_register(const register_req &text)
{
    register_resp ret;
    std::string reg_name;
    std::string hash_pwd;

    picosha2::hash256_hex_string(text.reg_password, hash_pwd);

    if (true == Base64::Decode(text.reg_name, &reg_name))
    {
        auto db_ret = db_sqlite_insert_user(text.reg_number, hash_pwd, reg_name);
        if (0 == db_ret)
            ret = "success";
        else if (1 == db_ret)
            ret = "exit";
        else
            ret = "fail";
    }

    return ret;
}

login_resp user_manage::proc_login(const login_req& text)
{
    login_resp ret = {"fail", ""};
    std::string hash_pwd;

    picosha2::hash256_hex_string(text.login_pwd, hash_pwd);

    if (db_sqlite_query_user(text.login_id, hash_pwd))
    {
        auto ssid = db_sqlite_logon_user(text.login_id);
        if (ssid.length() == 32)
        {
            ret.status = "success";
            ret.ssid = ssid;
        }
    }

    return ret;
}

hello_resp user_manage::proc_get_hello()
{
    hello_resp ret = {"hello mvc"};

    return ret;
}

login_random_resp user_manage::proc_login_random()
{
    login_random_resp ret;

    auto random_user_ssid = RandomUserGenerat();

    if (random_user_ssid.length() >= 0)
    {
        ret.status = "success";
        ret.type = "response";
        ret.ssid = random_user_ssid;
    }

    return ret;
}

std::string get_string_from_redis(redisContext *_predis, std::string _command)
{
    std::string ret = "";

    auto preply = redisCommand(_predis, _command.c_str());
    if (NULL != preply)
    {
        redisReply *stdreply = (redisReply *)preply;
        if (REDIS_REPLY_STRING == stdreply->type)
        {
            ret.assign(stdreply->str, stdreply->len);
        }

        freeReplyObject(preply);
    }

    return ret;
}

get_user_info_resp user_manage::proc_get_user_info(std::string ssid)
{
    get_user_info_resp ret = {"fail", "", ""};
    redisContext *predis = redisConnect("localhost", 6379);

    if (NULL != predis)
    {
        std::string command;
        command = std::string("HGET user_ssid:") + ssid + " name";
        Base64::Encode(get_string_from_redis(predis, command), &ret.name) ;
        command = std::string("HGET user_ssid:") + ssid + " cash";
        ret.cash = get_string_from_redis(predis, command);
        ret.status = "success";

        redisFree(predis);
    }

    return ret;
}

std::string user_manage::proc_logoff(std::string ssid)
{
    std::string ret = "fail";
    redisContext *predis = redisConnect("localhost", 6379);
    if (NULL != predis)
    {
        auto user_id = get_string_from_redis(predis, std::string("HGET user_ssid:") + ssid + " id");
        freeReplyObject(redisCommand(predis, "DEL user_ssid:%s", ssid.c_str()));
        freeReplyObject(redisCommand(predis, "DEL id:%s", user_id.c_str()));
        redisFree(predis);
        ret = "success";
    }

    return ret;
}