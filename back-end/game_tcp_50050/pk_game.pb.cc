// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pk_game.proto

#include "pk_game.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_pk_5fgame_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_player_info_pk_5fgame_2eproto;
namespace pk_game {
class sync_infoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<sync_info> _instance;
} _sync_info_default_instance_;
class create_roomDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<create_room> _instance;
} _create_room_default_instance_;
class enter_roomDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<enter_room> _instance;
} _enter_room_default_instance_;
class player_infoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<player_info> _instance;
} _player_info_default_instance_;
class room_infoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<room_info> _instance;
} _room_info_default_instance_;
}  // namespace pk_game
static void InitDefaultsscc_info_create_room_pk_5fgame_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pk_game::_create_room_default_instance_;
    new (ptr) ::pk_game::create_room();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pk_game::create_room::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_create_room_pk_5fgame_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_create_room_pk_5fgame_2eproto}, {}};

static void InitDefaultsscc_info_enter_room_pk_5fgame_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pk_game::_enter_room_default_instance_;
    new (ptr) ::pk_game::enter_room();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pk_game::enter_room::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_enter_room_pk_5fgame_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_enter_room_pk_5fgame_2eproto}, {}};

static void InitDefaultsscc_info_player_info_pk_5fgame_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pk_game::_player_info_default_instance_;
    new (ptr) ::pk_game::player_info();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pk_game::player_info::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_player_info_pk_5fgame_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_player_info_pk_5fgame_2eproto}, {}};

static void InitDefaultsscc_info_room_info_pk_5fgame_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pk_game::_room_info_default_instance_;
    new (ptr) ::pk_game::room_info();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pk_game::room_info::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_room_info_pk_5fgame_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_room_info_pk_5fgame_2eproto}, {
      &scc_info_player_info_pk_5fgame_2eproto.base,}};

static void InitDefaultsscc_info_sync_info_pk_5fgame_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pk_game::_sync_info_default_instance_;
    new (ptr) ::pk_game::sync_info();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pk_game::sync_info::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_sync_info_pk_5fgame_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_sync_info_pk_5fgame_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_pk_5fgame_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_pk_5fgame_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_pk_5fgame_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_pk_5fgame_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pk_game::sync_info, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pk_game::sync_info, ssid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pk_game::create_room, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pk_game::create_room, ssid_),
  PROTOBUF_FIELD_OFFSET(::pk_game::create_room, room_no_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pk_game::enter_room, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pk_game::enter_room, ssid_),
  PROTOBUF_FIELD_OFFSET(::pk_game::enter_room, room_no_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pk_game::player_info, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pk_game::player_info, ssid_),
  PROTOBUF_FIELD_OFFSET(::pk_game::player_info, seat_),
  PROTOBUF_FIELD_OFFSET(::pk_game::player_info, name_),
  PROTOBUF_FIELD_OFFSET(::pk_game::player_info, bat_cash_),
  PROTOBUF_FIELD_OFFSET(::pk_game::player_info, cur_cash_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pk_game::room_info, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pk_game::room_info, room_no_),
  PROTOBUF_FIELD_OFFSET(::pk_game::room_info, all_players_),
  PROTOBUF_FIELD_OFFSET(::pk_game::room_info, round_),
  PROTOBUF_FIELD_OFFSET(::pk_game::room_info, action_seat_),
  PROTOBUF_FIELD_OFFSET(::pk_game::room_info, big_blind_),
  PROTOBUF_FIELD_OFFSET(::pk_game::room_info, min_bat_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::pk_game::sync_info)},
  { 6, -1, sizeof(::pk_game::create_room)},
  { 13, -1, sizeof(::pk_game::enter_room)},
  { 20, -1, sizeof(::pk_game::player_info)},
  { 30, -1, sizeof(::pk_game::room_info)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pk_game::_sync_info_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pk_game::_create_room_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pk_game::_enter_room_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pk_game::_player_info_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pk_game::_room_info_default_instance_),
};

const char descriptor_table_protodef_pk_5fgame_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rpk_game.proto\022\007pk_game\"\031\n\tsync_info\022\014\n"
  "\004ssid\030\001 \001(\t\",\n\013create_room\022\014\n\004ssid\030\001 \001(\t"
  "\022\017\n\007room_no\030\002 \001(\005\"+\n\nenter_room\022\014\n\004ssid\030"
  "\001 \001(\t\022\017\n\007room_no\030\002 \001(\005\"[\n\013player_info\022\014\n"
  "\004ssid\030\001 \001(\t\022\014\n\004seat\030\002 \001(\005\022\014\n\004name\030\003 \001(\t\022"
  "\020\n\010bat_cash\030\004 \001(\005\022\020\n\010cur_cash\030\005 \001(\005\"\217\001\n\t"
  "room_info\022\017\n\007room_no\030\001 \001(\005\022)\n\013all_player"
  "s\030\002 \003(\0132\024.pk_game.player_info\022\r\n\005round\030\003"
  " \001(\005\022\023\n\013action_seat\030\004 \001(\005\022\021\n\tbig_blind\030\005"
  " \001(\005\022\017\n\007min_bat\030\006 \001(\005b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_pk_5fgame_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_pk_5fgame_2eproto_sccs[5] = {
  &scc_info_create_room_pk_5fgame_2eproto.base,
  &scc_info_enter_room_pk_5fgame_2eproto.base,
  &scc_info_player_info_pk_5fgame_2eproto.base,
  &scc_info_room_info_pk_5fgame_2eproto.base,
  &scc_info_sync_info_pk_5fgame_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_pk_5fgame_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pk_5fgame_2eproto = {
  false, false, descriptor_table_protodef_pk_5fgame_2eproto, "pk_game.proto", 389,
  &descriptor_table_pk_5fgame_2eproto_once, descriptor_table_pk_5fgame_2eproto_sccs, descriptor_table_pk_5fgame_2eproto_deps, 5, 0,
  schemas, file_default_instances, TableStruct_pk_5fgame_2eproto::offsets,
  file_level_metadata_pk_5fgame_2eproto, 5, file_level_enum_descriptors_pk_5fgame_2eproto, file_level_service_descriptors_pk_5fgame_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_pk_5fgame_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_pk_5fgame_2eproto)), true);
namespace pk_game {

// ===================================================================

void sync_info::InitAsDefaultInstance() {
}
class sync_info::_Internal {
 public:
};

sync_info::sync_info(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pk_game.sync_info)
}
sync_info::sync_info(const sync_info& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ssid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ssid().empty()) {
    ssid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ssid(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:pk_game.sync_info)
}

void sync_info::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_sync_info_pk_5fgame_2eproto.base);
  ssid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

sync_info::~sync_info() {
  // @@protoc_insertion_point(destructor:pk_game.sync_info)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void sync_info::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  ssid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void sync_info::ArenaDtor(void* object) {
  sync_info* _this = reinterpret_cast< sync_info* >(object);
  (void)_this;
}
void sync_info::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void sync_info::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const sync_info& sync_info::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_sync_info_pk_5fgame_2eproto.base);
  return *internal_default_instance();
}


void sync_info::Clear() {
// @@protoc_insertion_point(message_clear_start:pk_game.sync_info)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ssid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* sync_info::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string ssid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_ssid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pk_game.sync_info.ssid"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* sync_info::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pk_game.sync_info)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ssid = 1;
  if (this->ssid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ssid().data(), static_cast<int>(this->_internal_ssid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pk_game.sync_info.ssid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_ssid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pk_game.sync_info)
  return target;
}

size_t sync_info::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pk_game.sync_info)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ssid = 1;
  if (this->ssid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ssid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void sync_info::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pk_game.sync_info)
  GOOGLE_DCHECK_NE(&from, this);
  const sync_info* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<sync_info>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pk_game.sync_info)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pk_game.sync_info)
    MergeFrom(*source);
  }
}

void sync_info::MergeFrom(const sync_info& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pk_game.sync_info)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ssid().size() > 0) {
    _internal_set_ssid(from._internal_ssid());
  }
}

void sync_info::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pk_game.sync_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sync_info::CopyFrom(const sync_info& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pk_game.sync_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sync_info::IsInitialized() const {
  return true;
}

void sync_info::InternalSwap(sync_info* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ssid_.Swap(&other->ssid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata sync_info::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void create_room::InitAsDefaultInstance() {
}
class create_room::_Internal {
 public:
};

create_room::create_room(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pk_game.create_room)
}
create_room::create_room(const create_room& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ssid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ssid().empty()) {
    ssid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ssid(),
      GetArena());
  }
  room_no_ = from.room_no_;
  // @@protoc_insertion_point(copy_constructor:pk_game.create_room)
}

void create_room::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_create_room_pk_5fgame_2eproto.base);
  ssid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  room_no_ = 0;
}

create_room::~create_room() {
  // @@protoc_insertion_point(destructor:pk_game.create_room)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void create_room::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  ssid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void create_room::ArenaDtor(void* object) {
  create_room* _this = reinterpret_cast< create_room* >(object);
  (void)_this;
}
void create_room::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void create_room::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const create_room& create_room::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_create_room_pk_5fgame_2eproto.base);
  return *internal_default_instance();
}


void create_room::Clear() {
// @@protoc_insertion_point(message_clear_start:pk_game.create_room)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ssid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  room_no_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* create_room::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string ssid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_ssid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pk_game.create_room.ssid"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 room_no = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          room_no_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* create_room::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pk_game.create_room)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ssid = 1;
  if (this->ssid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ssid().data(), static_cast<int>(this->_internal_ssid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pk_game.create_room.ssid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_ssid(), target);
  }

  // int32 room_no = 2;
  if (this->room_no() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_room_no(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pk_game.create_room)
  return target;
}

size_t create_room::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pk_game.create_room)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ssid = 1;
  if (this->ssid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ssid());
  }

  // int32 room_no = 2;
  if (this->room_no() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_room_no());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void create_room::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pk_game.create_room)
  GOOGLE_DCHECK_NE(&from, this);
  const create_room* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<create_room>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pk_game.create_room)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pk_game.create_room)
    MergeFrom(*source);
  }
}

void create_room::MergeFrom(const create_room& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pk_game.create_room)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ssid().size() > 0) {
    _internal_set_ssid(from._internal_ssid());
  }
  if (from.room_no() != 0) {
    _internal_set_room_no(from._internal_room_no());
  }
}

void create_room::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pk_game.create_room)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void create_room::CopyFrom(const create_room& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pk_game.create_room)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool create_room::IsInitialized() const {
  return true;
}

void create_room::InternalSwap(create_room* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ssid_.Swap(&other->ssid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(room_no_, other->room_no_);
}

::PROTOBUF_NAMESPACE_ID::Metadata create_room::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void enter_room::InitAsDefaultInstance() {
}
class enter_room::_Internal {
 public:
};

enter_room::enter_room(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pk_game.enter_room)
}
enter_room::enter_room(const enter_room& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ssid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ssid().empty()) {
    ssid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ssid(),
      GetArena());
  }
  room_no_ = from.room_no_;
  // @@protoc_insertion_point(copy_constructor:pk_game.enter_room)
}

void enter_room::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_enter_room_pk_5fgame_2eproto.base);
  ssid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  room_no_ = 0;
}

enter_room::~enter_room() {
  // @@protoc_insertion_point(destructor:pk_game.enter_room)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void enter_room::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  ssid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void enter_room::ArenaDtor(void* object) {
  enter_room* _this = reinterpret_cast< enter_room* >(object);
  (void)_this;
}
void enter_room::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void enter_room::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const enter_room& enter_room::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_enter_room_pk_5fgame_2eproto.base);
  return *internal_default_instance();
}


void enter_room::Clear() {
// @@protoc_insertion_point(message_clear_start:pk_game.enter_room)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ssid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  room_no_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* enter_room::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string ssid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_ssid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pk_game.enter_room.ssid"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 room_no = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          room_no_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* enter_room::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pk_game.enter_room)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ssid = 1;
  if (this->ssid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ssid().data(), static_cast<int>(this->_internal_ssid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pk_game.enter_room.ssid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_ssid(), target);
  }

  // int32 room_no = 2;
  if (this->room_no() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_room_no(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pk_game.enter_room)
  return target;
}

size_t enter_room::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pk_game.enter_room)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ssid = 1;
  if (this->ssid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ssid());
  }

  // int32 room_no = 2;
  if (this->room_no() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_room_no());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void enter_room::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pk_game.enter_room)
  GOOGLE_DCHECK_NE(&from, this);
  const enter_room* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<enter_room>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pk_game.enter_room)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pk_game.enter_room)
    MergeFrom(*source);
  }
}

void enter_room::MergeFrom(const enter_room& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pk_game.enter_room)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ssid().size() > 0) {
    _internal_set_ssid(from._internal_ssid());
  }
  if (from.room_no() != 0) {
    _internal_set_room_no(from._internal_room_no());
  }
}

void enter_room::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pk_game.enter_room)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void enter_room::CopyFrom(const enter_room& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pk_game.enter_room)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool enter_room::IsInitialized() const {
  return true;
}

void enter_room::InternalSwap(enter_room* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ssid_.Swap(&other->ssid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(room_no_, other->room_no_);
}

::PROTOBUF_NAMESPACE_ID::Metadata enter_room::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void player_info::InitAsDefaultInstance() {
}
class player_info::_Internal {
 public:
};

player_info::player_info(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pk_game.player_info)
}
player_info::player_info(const player_info& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ssid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ssid().empty()) {
    ssid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ssid(),
      GetArena());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  ::memcpy(&seat_, &from.seat_,
    static_cast<size_t>(reinterpret_cast<char*>(&cur_cash_) -
    reinterpret_cast<char*>(&seat_)) + sizeof(cur_cash_));
  // @@protoc_insertion_point(copy_constructor:pk_game.player_info)
}

void player_info::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_player_info_pk_5fgame_2eproto.base);
  ssid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&seat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cur_cash_) -
      reinterpret_cast<char*>(&seat_)) + sizeof(cur_cash_));
}

player_info::~player_info() {
  // @@protoc_insertion_point(destructor:pk_game.player_info)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void player_info::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  ssid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void player_info::ArenaDtor(void* object) {
  player_info* _this = reinterpret_cast< player_info* >(object);
  (void)_this;
}
void player_info::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void player_info::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const player_info& player_info::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_player_info_pk_5fgame_2eproto.base);
  return *internal_default_instance();
}


void player_info::Clear() {
// @@protoc_insertion_point(message_clear_start:pk_game.player_info)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ssid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&seat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cur_cash_) -
      reinterpret_cast<char*>(&seat_)) + sizeof(cur_cash_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* player_info::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string ssid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_ssid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pk_game.player_info.ssid"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 seat = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          seat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pk_game.player_info.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 bat_cash = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          bat_cash_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 cur_cash = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          cur_cash_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* player_info::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pk_game.player_info)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ssid = 1;
  if (this->ssid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ssid().data(), static_cast<int>(this->_internal_ssid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pk_game.player_info.ssid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_ssid(), target);
  }

  // int32 seat = 2;
  if (this->seat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_seat(), target);
  }

  // string name = 3;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pk_game.player_info.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  // int32 bat_cash = 4;
  if (this->bat_cash() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_bat_cash(), target);
  }

  // int32 cur_cash = 5;
  if (this->cur_cash() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_cur_cash(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pk_game.player_info)
  return target;
}

size_t player_info::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pk_game.player_info)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ssid = 1;
  if (this->ssid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ssid());
  }

  // string name = 3;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // int32 seat = 2;
  if (this->seat() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_seat());
  }

  // int32 bat_cash = 4;
  if (this->bat_cash() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_bat_cash());
  }

  // int32 cur_cash = 5;
  if (this->cur_cash() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cur_cash());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void player_info::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pk_game.player_info)
  GOOGLE_DCHECK_NE(&from, this);
  const player_info* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<player_info>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pk_game.player_info)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pk_game.player_info)
    MergeFrom(*source);
  }
}

void player_info::MergeFrom(const player_info& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pk_game.player_info)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ssid().size() > 0) {
    _internal_set_ssid(from._internal_ssid());
  }
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.seat() != 0) {
    _internal_set_seat(from._internal_seat());
  }
  if (from.bat_cash() != 0) {
    _internal_set_bat_cash(from._internal_bat_cash());
  }
  if (from.cur_cash() != 0) {
    _internal_set_cur_cash(from._internal_cur_cash());
  }
}

void player_info::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pk_game.player_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void player_info::CopyFrom(const player_info& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pk_game.player_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool player_info::IsInitialized() const {
  return true;
}

void player_info::InternalSwap(player_info* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ssid_.Swap(&other->ssid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(player_info, cur_cash_)
      + sizeof(player_info::cur_cash_)
      - PROTOBUF_FIELD_OFFSET(player_info, seat_)>(
          reinterpret_cast<char*>(&seat_),
          reinterpret_cast<char*>(&other->seat_));
}

::PROTOBUF_NAMESPACE_ID::Metadata player_info::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void room_info::InitAsDefaultInstance() {
}
class room_info::_Internal {
 public:
};

room_info::room_info(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  all_players_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pk_game.room_info)
}
room_info::room_info(const room_info& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      all_players_(from.all_players_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&room_no_, &from.room_no_,
    static_cast<size_t>(reinterpret_cast<char*>(&min_bat_) -
    reinterpret_cast<char*>(&room_no_)) + sizeof(min_bat_));
  // @@protoc_insertion_point(copy_constructor:pk_game.room_info)
}

void room_info::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_room_info_pk_5fgame_2eproto.base);
  ::memset(&room_no_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&min_bat_) -
      reinterpret_cast<char*>(&room_no_)) + sizeof(min_bat_));
}

room_info::~room_info() {
  // @@protoc_insertion_point(destructor:pk_game.room_info)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void room_info::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void room_info::ArenaDtor(void* object) {
  room_info* _this = reinterpret_cast< room_info* >(object);
  (void)_this;
}
void room_info::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void room_info::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const room_info& room_info::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_room_info_pk_5fgame_2eproto.base);
  return *internal_default_instance();
}


void room_info::Clear() {
// @@protoc_insertion_point(message_clear_start:pk_game.room_info)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  all_players_.Clear();
  ::memset(&room_no_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&min_bat_) -
      reinterpret_cast<char*>(&room_no_)) + sizeof(min_bat_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* room_info::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 room_no = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          room_no_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .pk_game.player_info all_players = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_all_players(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 round = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          round_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 action_seat = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          action_seat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 big_blind = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          big_blind_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 min_bat = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          min_bat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* room_info::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pk_game.room_info)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 room_no = 1;
  if (this->room_no() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_room_no(), target);
  }

  // repeated .pk_game.player_info all_players = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_all_players_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_all_players(i), target, stream);
  }

  // int32 round = 3;
  if (this->round() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_round(), target);
  }

  // int32 action_seat = 4;
  if (this->action_seat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_action_seat(), target);
  }

  // int32 big_blind = 5;
  if (this->big_blind() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_big_blind(), target);
  }

  // int32 min_bat = 6;
  if (this->min_bat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_min_bat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pk_game.room_info)
  return target;
}

size_t room_info::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pk_game.room_info)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pk_game.player_info all_players = 2;
  total_size += 1UL * this->_internal_all_players_size();
  for (const auto& msg : this->all_players_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 room_no = 1;
  if (this->room_no() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_room_no());
  }

  // int32 round = 3;
  if (this->round() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_round());
  }

  // int32 action_seat = 4;
  if (this->action_seat() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_action_seat());
  }

  // int32 big_blind = 5;
  if (this->big_blind() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_big_blind());
  }

  // int32 min_bat = 6;
  if (this->min_bat() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_min_bat());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void room_info::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pk_game.room_info)
  GOOGLE_DCHECK_NE(&from, this);
  const room_info* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<room_info>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pk_game.room_info)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pk_game.room_info)
    MergeFrom(*source);
  }
}

void room_info::MergeFrom(const room_info& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pk_game.room_info)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  all_players_.MergeFrom(from.all_players_);
  if (from.room_no() != 0) {
    _internal_set_room_no(from._internal_room_no());
  }
  if (from.round() != 0) {
    _internal_set_round(from._internal_round());
  }
  if (from.action_seat() != 0) {
    _internal_set_action_seat(from._internal_action_seat());
  }
  if (from.big_blind() != 0) {
    _internal_set_big_blind(from._internal_big_blind());
  }
  if (from.min_bat() != 0) {
    _internal_set_min_bat(from._internal_min_bat());
  }
}

void room_info::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pk_game.room_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void room_info::CopyFrom(const room_info& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pk_game.room_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool room_info::IsInitialized() const {
  return true;
}

void room_info::InternalSwap(room_info* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  all_players_.InternalSwap(&other->all_players_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(room_info, min_bat_)
      + sizeof(room_info::min_bat_)
      - PROTOBUF_FIELD_OFFSET(room_info, room_no_)>(
          reinterpret_cast<char*>(&room_no_),
          reinterpret_cast<char*>(&other->room_no_));
}

::PROTOBUF_NAMESPACE_ID::Metadata room_info::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace pk_game
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pk_game::sync_info* Arena::CreateMaybeMessage< ::pk_game::sync_info >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pk_game::sync_info >(arena);
}
template<> PROTOBUF_NOINLINE ::pk_game::create_room* Arena::CreateMaybeMessage< ::pk_game::create_room >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pk_game::create_room >(arena);
}
template<> PROTOBUF_NOINLINE ::pk_game::enter_room* Arena::CreateMaybeMessage< ::pk_game::enter_room >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pk_game::enter_room >(arena);
}
template<> PROTOBUF_NOINLINE ::pk_game::player_info* Arena::CreateMaybeMessage< ::pk_game::player_info >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pk_game::player_info >(arena);
}
template<> PROTOBUF_NOINLINE ::pk_game::room_info* Arena::CreateMaybeMessage< ::pk_game::room_info >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pk_game::room_info >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
