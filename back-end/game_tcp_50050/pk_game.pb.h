// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pk_game.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_pk_5fgame_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_pk_5fgame_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_pk_5fgame_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_pk_5fgame_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pk_5fgame_2eproto;
namespace pk_game {
class create_room;
class create_roomDefaultTypeInternal;
extern create_roomDefaultTypeInternal _create_room_default_instance_;
class enter_room;
class enter_roomDefaultTypeInternal;
extern enter_roomDefaultTypeInternal _enter_room_default_instance_;
class player_info;
class player_infoDefaultTypeInternal;
extern player_infoDefaultTypeInternal _player_info_default_instance_;
class room_info;
class room_infoDefaultTypeInternal;
extern room_infoDefaultTypeInternal _room_info_default_instance_;
class sync_info;
class sync_infoDefaultTypeInternal;
extern sync_infoDefaultTypeInternal _sync_info_default_instance_;
}  // namespace pk_game
PROTOBUF_NAMESPACE_OPEN
template<> ::pk_game::create_room* Arena::CreateMaybeMessage<::pk_game::create_room>(Arena*);
template<> ::pk_game::enter_room* Arena::CreateMaybeMessage<::pk_game::enter_room>(Arena*);
template<> ::pk_game::player_info* Arena::CreateMaybeMessage<::pk_game::player_info>(Arena*);
template<> ::pk_game::room_info* Arena::CreateMaybeMessage<::pk_game::room_info>(Arena*);
template<> ::pk_game::sync_info* Arena::CreateMaybeMessage<::pk_game::sync_info>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pk_game {

// ===================================================================

class sync_info PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pk_game.sync_info) */ {
 public:
  inline sync_info() : sync_info(nullptr) {}
  virtual ~sync_info();

  sync_info(const sync_info& from);
  sync_info(sync_info&& from) noexcept
    : sync_info() {
    *this = ::std::move(from);
  }

  inline sync_info& operator=(const sync_info& from) {
    CopyFrom(from);
    return *this;
  }
  inline sync_info& operator=(sync_info&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const sync_info& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const sync_info* internal_default_instance() {
    return reinterpret_cast<const sync_info*>(
               &_sync_info_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(sync_info& a, sync_info& b) {
    a.Swap(&b);
  }
  inline void Swap(sync_info* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(sync_info* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline sync_info* New() const final {
    return CreateMaybeMessage<sync_info>(nullptr);
  }

  sync_info* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<sync_info>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const sync_info& from);
  void MergeFrom(const sync_info& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(sync_info* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pk_game.sync_info";
  }
  protected:
  explicit sync_info(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pk_5fgame_2eproto);
    return ::descriptor_table_pk_5fgame_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSsidFieldNumber = 1,
  };
  // string ssid = 1;
  void clear_ssid();
  const std::string& ssid() const;
  void set_ssid(const std::string& value);
  void set_ssid(std::string&& value);
  void set_ssid(const char* value);
  void set_ssid(const char* value, size_t size);
  std::string* mutable_ssid();
  std::string* release_ssid();
  void set_allocated_ssid(std::string* ssid);
  private:
  const std::string& _internal_ssid() const;
  void _internal_set_ssid(const std::string& value);
  std::string* _internal_mutable_ssid();
  public:

  // @@protoc_insertion_point(class_scope:pk_game.sync_info)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ssid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pk_5fgame_2eproto;
};
// -------------------------------------------------------------------

class create_room PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pk_game.create_room) */ {
 public:
  inline create_room() : create_room(nullptr) {}
  virtual ~create_room();

  create_room(const create_room& from);
  create_room(create_room&& from) noexcept
    : create_room() {
    *this = ::std::move(from);
  }

  inline create_room& operator=(const create_room& from) {
    CopyFrom(from);
    return *this;
  }
  inline create_room& operator=(create_room&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const create_room& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const create_room* internal_default_instance() {
    return reinterpret_cast<const create_room*>(
               &_create_room_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(create_room& a, create_room& b) {
    a.Swap(&b);
  }
  inline void Swap(create_room* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(create_room* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline create_room* New() const final {
    return CreateMaybeMessage<create_room>(nullptr);
  }

  create_room* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<create_room>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const create_room& from);
  void MergeFrom(const create_room& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(create_room* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pk_game.create_room";
  }
  protected:
  explicit create_room(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pk_5fgame_2eproto);
    return ::descriptor_table_pk_5fgame_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSsidFieldNumber = 1,
    kRoomNoFieldNumber = 2,
  };
  // string ssid = 1;
  void clear_ssid();
  const std::string& ssid() const;
  void set_ssid(const std::string& value);
  void set_ssid(std::string&& value);
  void set_ssid(const char* value);
  void set_ssid(const char* value, size_t size);
  std::string* mutable_ssid();
  std::string* release_ssid();
  void set_allocated_ssid(std::string* ssid);
  private:
  const std::string& _internal_ssid() const;
  void _internal_set_ssid(const std::string& value);
  std::string* _internal_mutable_ssid();
  public:

  // int32 room_no = 2;
  void clear_room_no();
  ::PROTOBUF_NAMESPACE_ID::int32 room_no() const;
  void set_room_no(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_room_no() const;
  void _internal_set_room_no(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pk_game.create_room)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ssid_;
  ::PROTOBUF_NAMESPACE_ID::int32 room_no_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pk_5fgame_2eproto;
};
// -------------------------------------------------------------------

class enter_room PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pk_game.enter_room) */ {
 public:
  inline enter_room() : enter_room(nullptr) {}
  virtual ~enter_room();

  enter_room(const enter_room& from);
  enter_room(enter_room&& from) noexcept
    : enter_room() {
    *this = ::std::move(from);
  }

  inline enter_room& operator=(const enter_room& from) {
    CopyFrom(from);
    return *this;
  }
  inline enter_room& operator=(enter_room&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const enter_room& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const enter_room* internal_default_instance() {
    return reinterpret_cast<const enter_room*>(
               &_enter_room_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(enter_room& a, enter_room& b) {
    a.Swap(&b);
  }
  inline void Swap(enter_room* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(enter_room* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline enter_room* New() const final {
    return CreateMaybeMessage<enter_room>(nullptr);
  }

  enter_room* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<enter_room>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const enter_room& from);
  void MergeFrom(const enter_room& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(enter_room* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pk_game.enter_room";
  }
  protected:
  explicit enter_room(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pk_5fgame_2eproto);
    return ::descriptor_table_pk_5fgame_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSsidFieldNumber = 1,
    kRoomNoFieldNumber = 2,
  };
  // string ssid = 1;
  void clear_ssid();
  const std::string& ssid() const;
  void set_ssid(const std::string& value);
  void set_ssid(std::string&& value);
  void set_ssid(const char* value);
  void set_ssid(const char* value, size_t size);
  std::string* mutable_ssid();
  std::string* release_ssid();
  void set_allocated_ssid(std::string* ssid);
  private:
  const std::string& _internal_ssid() const;
  void _internal_set_ssid(const std::string& value);
  std::string* _internal_mutable_ssid();
  public:

  // int32 room_no = 2;
  void clear_room_no();
  ::PROTOBUF_NAMESPACE_ID::int32 room_no() const;
  void set_room_no(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_room_no() const;
  void _internal_set_room_no(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pk_game.enter_room)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ssid_;
  ::PROTOBUF_NAMESPACE_ID::int32 room_no_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pk_5fgame_2eproto;
};
// -------------------------------------------------------------------

class player_info PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pk_game.player_info) */ {
 public:
  inline player_info() : player_info(nullptr) {}
  virtual ~player_info();

  player_info(const player_info& from);
  player_info(player_info&& from) noexcept
    : player_info() {
    *this = ::std::move(from);
  }

  inline player_info& operator=(const player_info& from) {
    CopyFrom(from);
    return *this;
  }
  inline player_info& operator=(player_info&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const player_info& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const player_info* internal_default_instance() {
    return reinterpret_cast<const player_info*>(
               &_player_info_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(player_info& a, player_info& b) {
    a.Swap(&b);
  }
  inline void Swap(player_info* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(player_info* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline player_info* New() const final {
    return CreateMaybeMessage<player_info>(nullptr);
  }

  player_info* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<player_info>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const player_info& from);
  void MergeFrom(const player_info& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(player_info* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pk_game.player_info";
  }
  protected:
  explicit player_info(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pk_5fgame_2eproto);
    return ::descriptor_table_pk_5fgame_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSsidFieldNumber = 1,
    kNameFieldNumber = 3,
    kSeatFieldNumber = 2,
    kBatCashFieldNumber = 4,
    kCurCashFieldNumber = 5,
  };
  // string ssid = 1;
  void clear_ssid();
  const std::string& ssid() const;
  void set_ssid(const std::string& value);
  void set_ssid(std::string&& value);
  void set_ssid(const char* value);
  void set_ssid(const char* value, size_t size);
  std::string* mutable_ssid();
  std::string* release_ssid();
  void set_allocated_ssid(std::string* ssid);
  private:
  const std::string& _internal_ssid() const;
  void _internal_set_ssid(const std::string& value);
  std::string* _internal_mutable_ssid();
  public:

  // string name = 3;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int32 seat = 2;
  void clear_seat();
  ::PROTOBUF_NAMESPACE_ID::int32 seat() const;
  void set_seat(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_seat() const;
  void _internal_set_seat(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 bat_cash = 4;
  void clear_bat_cash();
  ::PROTOBUF_NAMESPACE_ID::int32 bat_cash() const;
  void set_bat_cash(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bat_cash() const;
  void _internal_set_bat_cash(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 cur_cash = 5;
  void clear_cur_cash();
  ::PROTOBUF_NAMESPACE_ID::int32 cur_cash() const;
  void set_cur_cash(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cur_cash() const;
  void _internal_set_cur_cash(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pk_game.player_info)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ssid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int32 seat_;
  ::PROTOBUF_NAMESPACE_ID::int32 bat_cash_;
  ::PROTOBUF_NAMESPACE_ID::int32 cur_cash_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pk_5fgame_2eproto;
};
// -------------------------------------------------------------------

class room_info PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pk_game.room_info) */ {
 public:
  inline room_info() : room_info(nullptr) {}
  virtual ~room_info();

  room_info(const room_info& from);
  room_info(room_info&& from) noexcept
    : room_info() {
    *this = ::std::move(from);
  }

  inline room_info& operator=(const room_info& from) {
    CopyFrom(from);
    return *this;
  }
  inline room_info& operator=(room_info&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const room_info& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const room_info* internal_default_instance() {
    return reinterpret_cast<const room_info*>(
               &_room_info_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(room_info& a, room_info& b) {
    a.Swap(&b);
  }
  inline void Swap(room_info* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(room_info* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline room_info* New() const final {
    return CreateMaybeMessage<room_info>(nullptr);
  }

  room_info* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<room_info>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const room_info& from);
  void MergeFrom(const room_info& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(room_info* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pk_game.room_info";
  }
  protected:
  explicit room_info(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pk_5fgame_2eproto);
    return ::descriptor_table_pk_5fgame_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAllPlayersFieldNumber = 2,
    kRoomNoFieldNumber = 1,
    kRoundFieldNumber = 3,
    kActionSeatFieldNumber = 4,
    kBigBlindFieldNumber = 5,
    kMinBatFieldNumber = 6,
  };
  // repeated .pk_game.player_info all_players = 2;
  int all_players_size() const;
  private:
  int _internal_all_players_size() const;
  public:
  void clear_all_players();
  ::pk_game::player_info* mutable_all_players(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pk_game::player_info >*
      mutable_all_players();
  private:
  const ::pk_game::player_info& _internal_all_players(int index) const;
  ::pk_game::player_info* _internal_add_all_players();
  public:
  const ::pk_game::player_info& all_players(int index) const;
  ::pk_game::player_info* add_all_players();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pk_game::player_info >&
      all_players() const;

  // int32 room_no = 1;
  void clear_room_no();
  ::PROTOBUF_NAMESPACE_ID::int32 room_no() const;
  void set_room_no(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_room_no() const;
  void _internal_set_room_no(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 round = 3;
  void clear_round();
  ::PROTOBUF_NAMESPACE_ID::int32 round() const;
  void set_round(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_round() const;
  void _internal_set_round(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 action_seat = 4;
  void clear_action_seat();
  ::PROTOBUF_NAMESPACE_ID::int32 action_seat() const;
  void set_action_seat(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_action_seat() const;
  void _internal_set_action_seat(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 big_blind = 5;
  void clear_big_blind();
  ::PROTOBUF_NAMESPACE_ID::int32 big_blind() const;
  void set_big_blind(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_big_blind() const;
  void _internal_set_big_blind(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 min_bat = 6;
  void clear_min_bat();
  ::PROTOBUF_NAMESPACE_ID::int32 min_bat() const;
  void set_min_bat(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_min_bat() const;
  void _internal_set_min_bat(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pk_game.room_info)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pk_game::player_info > all_players_;
  ::PROTOBUF_NAMESPACE_ID::int32 room_no_;
  ::PROTOBUF_NAMESPACE_ID::int32 round_;
  ::PROTOBUF_NAMESPACE_ID::int32 action_seat_;
  ::PROTOBUF_NAMESPACE_ID::int32 big_blind_;
  ::PROTOBUF_NAMESPACE_ID::int32 min_bat_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pk_5fgame_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// sync_info

// string ssid = 1;
inline void sync_info::clear_ssid() {
  ssid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& sync_info::ssid() const {
  // @@protoc_insertion_point(field_get:pk_game.sync_info.ssid)
  return _internal_ssid();
}
inline void sync_info::set_ssid(const std::string& value) {
  _internal_set_ssid(value);
  // @@protoc_insertion_point(field_set:pk_game.sync_info.ssid)
}
inline std::string* sync_info::mutable_ssid() {
  // @@protoc_insertion_point(field_mutable:pk_game.sync_info.ssid)
  return _internal_mutable_ssid();
}
inline const std::string& sync_info::_internal_ssid() const {
  return ssid_.Get();
}
inline void sync_info::_internal_set_ssid(const std::string& value) {
  
  ssid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void sync_info::set_ssid(std::string&& value) {
  
  ssid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pk_game.sync_info.ssid)
}
inline void sync_info::set_ssid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ssid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:pk_game.sync_info.ssid)
}
inline void sync_info::set_ssid(const char* value,
    size_t size) {
  
  ssid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pk_game.sync_info.ssid)
}
inline std::string* sync_info::_internal_mutable_ssid() {
  
  return ssid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* sync_info::release_ssid() {
  // @@protoc_insertion_point(field_release:pk_game.sync_info.ssid)
  return ssid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void sync_info::set_allocated_ssid(std::string* ssid) {
  if (ssid != nullptr) {
    
  } else {
    
  }
  ssid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ssid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pk_game.sync_info.ssid)
}

// -------------------------------------------------------------------

// create_room

// string ssid = 1;
inline void create_room::clear_ssid() {
  ssid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& create_room::ssid() const {
  // @@protoc_insertion_point(field_get:pk_game.create_room.ssid)
  return _internal_ssid();
}
inline void create_room::set_ssid(const std::string& value) {
  _internal_set_ssid(value);
  // @@protoc_insertion_point(field_set:pk_game.create_room.ssid)
}
inline std::string* create_room::mutable_ssid() {
  // @@protoc_insertion_point(field_mutable:pk_game.create_room.ssid)
  return _internal_mutable_ssid();
}
inline const std::string& create_room::_internal_ssid() const {
  return ssid_.Get();
}
inline void create_room::_internal_set_ssid(const std::string& value) {
  
  ssid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void create_room::set_ssid(std::string&& value) {
  
  ssid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pk_game.create_room.ssid)
}
inline void create_room::set_ssid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ssid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:pk_game.create_room.ssid)
}
inline void create_room::set_ssid(const char* value,
    size_t size) {
  
  ssid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pk_game.create_room.ssid)
}
inline std::string* create_room::_internal_mutable_ssid() {
  
  return ssid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* create_room::release_ssid() {
  // @@protoc_insertion_point(field_release:pk_game.create_room.ssid)
  return ssid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void create_room::set_allocated_ssid(std::string* ssid) {
  if (ssid != nullptr) {
    
  } else {
    
  }
  ssid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ssid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pk_game.create_room.ssid)
}

// int32 room_no = 2;
inline void create_room::clear_room_no() {
  room_no_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 create_room::_internal_room_no() const {
  return room_no_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 create_room::room_no() const {
  // @@protoc_insertion_point(field_get:pk_game.create_room.room_no)
  return _internal_room_no();
}
inline void create_room::_internal_set_room_no(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  room_no_ = value;
}
inline void create_room::set_room_no(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_room_no(value);
  // @@protoc_insertion_point(field_set:pk_game.create_room.room_no)
}

// -------------------------------------------------------------------

// enter_room

// string ssid = 1;
inline void enter_room::clear_ssid() {
  ssid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& enter_room::ssid() const {
  // @@protoc_insertion_point(field_get:pk_game.enter_room.ssid)
  return _internal_ssid();
}
inline void enter_room::set_ssid(const std::string& value) {
  _internal_set_ssid(value);
  // @@protoc_insertion_point(field_set:pk_game.enter_room.ssid)
}
inline std::string* enter_room::mutable_ssid() {
  // @@protoc_insertion_point(field_mutable:pk_game.enter_room.ssid)
  return _internal_mutable_ssid();
}
inline const std::string& enter_room::_internal_ssid() const {
  return ssid_.Get();
}
inline void enter_room::_internal_set_ssid(const std::string& value) {
  
  ssid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void enter_room::set_ssid(std::string&& value) {
  
  ssid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pk_game.enter_room.ssid)
}
inline void enter_room::set_ssid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ssid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:pk_game.enter_room.ssid)
}
inline void enter_room::set_ssid(const char* value,
    size_t size) {
  
  ssid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pk_game.enter_room.ssid)
}
inline std::string* enter_room::_internal_mutable_ssid() {
  
  return ssid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* enter_room::release_ssid() {
  // @@protoc_insertion_point(field_release:pk_game.enter_room.ssid)
  return ssid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void enter_room::set_allocated_ssid(std::string* ssid) {
  if (ssid != nullptr) {
    
  } else {
    
  }
  ssid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ssid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pk_game.enter_room.ssid)
}

// int32 room_no = 2;
inline void enter_room::clear_room_no() {
  room_no_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 enter_room::_internal_room_no() const {
  return room_no_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 enter_room::room_no() const {
  // @@protoc_insertion_point(field_get:pk_game.enter_room.room_no)
  return _internal_room_no();
}
inline void enter_room::_internal_set_room_no(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  room_no_ = value;
}
inline void enter_room::set_room_no(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_room_no(value);
  // @@protoc_insertion_point(field_set:pk_game.enter_room.room_no)
}

// -------------------------------------------------------------------

// player_info

// string ssid = 1;
inline void player_info::clear_ssid() {
  ssid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& player_info::ssid() const {
  // @@protoc_insertion_point(field_get:pk_game.player_info.ssid)
  return _internal_ssid();
}
inline void player_info::set_ssid(const std::string& value) {
  _internal_set_ssid(value);
  // @@protoc_insertion_point(field_set:pk_game.player_info.ssid)
}
inline std::string* player_info::mutable_ssid() {
  // @@protoc_insertion_point(field_mutable:pk_game.player_info.ssid)
  return _internal_mutable_ssid();
}
inline const std::string& player_info::_internal_ssid() const {
  return ssid_.Get();
}
inline void player_info::_internal_set_ssid(const std::string& value) {
  
  ssid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void player_info::set_ssid(std::string&& value) {
  
  ssid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pk_game.player_info.ssid)
}
inline void player_info::set_ssid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ssid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:pk_game.player_info.ssid)
}
inline void player_info::set_ssid(const char* value,
    size_t size) {
  
  ssid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pk_game.player_info.ssid)
}
inline std::string* player_info::_internal_mutable_ssid() {
  
  return ssid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* player_info::release_ssid() {
  // @@protoc_insertion_point(field_release:pk_game.player_info.ssid)
  return ssid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void player_info::set_allocated_ssid(std::string* ssid) {
  if (ssid != nullptr) {
    
  } else {
    
  }
  ssid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ssid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pk_game.player_info.ssid)
}

// int32 seat = 2;
inline void player_info::clear_seat() {
  seat_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 player_info::_internal_seat() const {
  return seat_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 player_info::seat() const {
  // @@protoc_insertion_point(field_get:pk_game.player_info.seat)
  return _internal_seat();
}
inline void player_info::_internal_set_seat(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  seat_ = value;
}
inline void player_info::set_seat(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_seat(value);
  // @@protoc_insertion_point(field_set:pk_game.player_info.seat)
}

// string name = 3;
inline void player_info::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& player_info::name() const {
  // @@protoc_insertion_point(field_get:pk_game.player_info.name)
  return _internal_name();
}
inline void player_info::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:pk_game.player_info.name)
}
inline std::string* player_info::mutable_name() {
  // @@protoc_insertion_point(field_mutable:pk_game.player_info.name)
  return _internal_mutable_name();
}
inline const std::string& player_info::_internal_name() const {
  return name_.Get();
}
inline void player_info::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void player_info::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pk_game.player_info.name)
}
inline void player_info::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:pk_game.player_info.name)
}
inline void player_info::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pk_game.player_info.name)
}
inline std::string* player_info::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* player_info::release_name() {
  // @@protoc_insertion_point(field_release:pk_game.player_info.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void player_info::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pk_game.player_info.name)
}

// int32 bat_cash = 4;
inline void player_info::clear_bat_cash() {
  bat_cash_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 player_info::_internal_bat_cash() const {
  return bat_cash_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 player_info::bat_cash() const {
  // @@protoc_insertion_point(field_get:pk_game.player_info.bat_cash)
  return _internal_bat_cash();
}
inline void player_info::_internal_set_bat_cash(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  bat_cash_ = value;
}
inline void player_info::set_bat_cash(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_bat_cash(value);
  // @@protoc_insertion_point(field_set:pk_game.player_info.bat_cash)
}

// int32 cur_cash = 5;
inline void player_info::clear_cur_cash() {
  cur_cash_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 player_info::_internal_cur_cash() const {
  return cur_cash_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 player_info::cur_cash() const {
  // @@protoc_insertion_point(field_get:pk_game.player_info.cur_cash)
  return _internal_cur_cash();
}
inline void player_info::_internal_set_cur_cash(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  cur_cash_ = value;
}
inline void player_info::set_cur_cash(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cur_cash(value);
  // @@protoc_insertion_point(field_set:pk_game.player_info.cur_cash)
}

// -------------------------------------------------------------------

// room_info

// int32 room_no = 1;
inline void room_info::clear_room_no() {
  room_no_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 room_info::_internal_room_no() const {
  return room_no_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 room_info::room_no() const {
  // @@protoc_insertion_point(field_get:pk_game.room_info.room_no)
  return _internal_room_no();
}
inline void room_info::_internal_set_room_no(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  room_no_ = value;
}
inline void room_info::set_room_no(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_room_no(value);
  // @@protoc_insertion_point(field_set:pk_game.room_info.room_no)
}

// repeated .pk_game.player_info all_players = 2;
inline int room_info::_internal_all_players_size() const {
  return all_players_.size();
}
inline int room_info::all_players_size() const {
  return _internal_all_players_size();
}
inline void room_info::clear_all_players() {
  all_players_.Clear();
}
inline ::pk_game::player_info* room_info::mutable_all_players(int index) {
  // @@protoc_insertion_point(field_mutable:pk_game.room_info.all_players)
  return all_players_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pk_game::player_info >*
room_info::mutable_all_players() {
  // @@protoc_insertion_point(field_mutable_list:pk_game.room_info.all_players)
  return &all_players_;
}
inline const ::pk_game::player_info& room_info::_internal_all_players(int index) const {
  return all_players_.Get(index);
}
inline const ::pk_game::player_info& room_info::all_players(int index) const {
  // @@protoc_insertion_point(field_get:pk_game.room_info.all_players)
  return _internal_all_players(index);
}
inline ::pk_game::player_info* room_info::_internal_add_all_players() {
  return all_players_.Add();
}
inline ::pk_game::player_info* room_info::add_all_players() {
  // @@protoc_insertion_point(field_add:pk_game.room_info.all_players)
  return _internal_add_all_players();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pk_game::player_info >&
room_info::all_players() const {
  // @@protoc_insertion_point(field_list:pk_game.room_info.all_players)
  return all_players_;
}

// int32 round = 3;
inline void room_info::clear_round() {
  round_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 room_info::_internal_round() const {
  return round_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 room_info::round() const {
  // @@protoc_insertion_point(field_get:pk_game.room_info.round)
  return _internal_round();
}
inline void room_info::_internal_set_round(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  round_ = value;
}
inline void room_info::set_round(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_round(value);
  // @@protoc_insertion_point(field_set:pk_game.room_info.round)
}

// int32 action_seat = 4;
inline void room_info::clear_action_seat() {
  action_seat_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 room_info::_internal_action_seat() const {
  return action_seat_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 room_info::action_seat() const {
  // @@protoc_insertion_point(field_get:pk_game.room_info.action_seat)
  return _internal_action_seat();
}
inline void room_info::_internal_set_action_seat(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  action_seat_ = value;
}
inline void room_info::set_action_seat(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_action_seat(value);
  // @@protoc_insertion_point(field_set:pk_game.room_info.action_seat)
}

// int32 big_blind = 5;
inline void room_info::clear_big_blind() {
  big_blind_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 room_info::_internal_big_blind() const {
  return big_blind_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 room_info::big_blind() const {
  // @@protoc_insertion_point(field_get:pk_game.room_info.big_blind)
  return _internal_big_blind();
}
inline void room_info::_internal_set_big_blind(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  big_blind_ = value;
}
inline void room_info::set_big_blind(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_big_blind(value);
  // @@protoc_insertion_point(field_set:pk_game.room_info.big_blind)
}

// int32 min_bat = 6;
inline void room_info::clear_min_bat() {
  min_bat_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 room_info::_internal_min_bat() const {
  return min_bat_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 room_info::min_bat() const {
  // @@protoc_insertion_point(field_get:pk_game.room_info.min_bat)
  return _internal_min_bat();
}
inline void room_info::_internal_set_min_bat(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  min_bat_ = value;
}
inline void room_info::set_min_bat(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_min_bat(value);
  // @@protoc_insertion_point(field_set:pk_game.room_info.min_bat)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pk_game

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_pk_5fgame_2eproto
